swagger: "2.0"
info:
  title: "Queue API for University of Utah College of Engineering"
  version: "1.0.0"
  description: "**The following endpoints/functionalities can be used in designing a TA queue for the UofU CoE.**\n\nNOTES:\n- To test endpoints using *Try it out*, you must first login using `login.php`. Please remember to logout with `logout.php` when finished.\n- You must be logged in as a TA/faculty to successfully use endpoints marked with *(TA)*; otherwise endpoints are open to all users.\n- Currently the only status code returned is 200. All JSON structures shown in the *Responses* sections correspond to successful requests. Be aware that other JSON structures are also possible responses (see *Models* at the bottom of this page).\n- Currently it is possible to receive somewhat misleading, `success` responses when in reality nothing happened (i.e. no state changed in database). This can occur in requests that are bad (e.g. a TA dequeuing a non-existent user) or incorrect (e.g. a user dequeuing themselves from a course they're not enrolled in). In short, the server won't always report your errors so be sure your posted arguments are correct and make logical sense."
  # termsOfService: "http://swagger.io/terms/"
  contact:
    email: "doublezane@gmail.com"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"

host: "suzie.eng.utah.edu"
basePath: "/blakeb/api"
schemes:
- "https"

consumes:
  - "application/x-www-form-urlencoded"
produces:
  - "application/json"

tags:
  - name: "Login/Logout"
  - name: "Courses"
    description: "Course functionalities"
  - name: "User"
    description: "User functionalities"
  - name: "Queue"
    description: "Queue functionalities"

paths:
  /login.php:
    post:
      summary: "Login a user"
      description: "Login a user with the specified CADE username and password and get their info."
      tags:
        - "Login/Logout"
      parameters:
      - name: "username"
        in: "formData"
        description: "CADE username"
        type: "string"
        required: true
      - name: "password"
        in: "formData"
        description: "CADE password"
        type: "string"
        format: "password"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                # example: "c00lperson"
              first_name:
                type: "string"
                # example: "Morgan"
              last_name:
                type: "string"
                # example: "Thompson"
              authenticated:
                type: "boolean"
                # example: true
  /logout.php:
    get:
      summary: "Logout a user"
      description: "Logout the user who sent the request. Naturally, the value of `authenticated` will always be false."
      tags:
        - "Login/Logout"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
                example: false
  /classes/all_classes.php:
    get:
      summary: "Get all courses"
      description: "Get all the courses that can be enrolled in (i.e. courses with queues). `all_courses` is a hashmap: the *keys* are course names (e.g. \"CS 4150: Algorithms\", represented below as `additionalPropX`) and the *values* are objects: an `acc_req` key with a boolean value indicating whether or not the course requires an access code to enroll."
      tags:
        - "Courses"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              all_courses:
                type: "object"
                additionalProperties:
                  type: "object"
                  properties:
                    acc_req:
                      type: "boolean"
  /user/get_info.php:
    get:
      summary: "Get user info"
      description: "Get the user's info."
      tags:
        - "User"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              student_info:
                type: "object"
                properties:
                  username:
                    type: "string"
                  first_name:
                    type: "string"
                  last_name:
                    type: "string"
  /user/add_class.php:
    post:
      summary: "Enroll user in a course"
      description: "Enroll the user in the specified course with the optional specified access code."
      tags:
        - "User"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "acc_code"
        in: "formData"
        description: "access code if required by course"
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /user/rem_class.php:
    post:
      summary: "Unenroll user from a course"
      description: "Unenroll the user from the specified course."
      tags:
        - "User"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /user/my_classes.php:
    get:
      summary: "Get user enrolled courses"
      description: "Get all the courses the user has enrolled in or TAs."
      tags:
        - "User"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              student_courses:
                type: "array"
                items:
                  type: "string"
              ta_courses:
                type: "array"
                items:
                  type: "string"
  /queue/get_queue.php:
    post:
      summary: "Get a queue"
      description: "Get the queue state for the specified course including the TAs on duty, course announcements, and time limit per student."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              authenticated:
                type: "boolean"
              state:
                type: "string"
              time_lim:
                type: "string"
              announce:
                type: "array"
                items:
                  type: "object"
                  properties:
                    announcement:
                      type: "string"
                    tmstmp:
                      type: "string"
              TAs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                    duration:
                      type: "string"
                    full_name:
                      type: "string"
                    helping:
                      type: "string"
              queue:
                type: "array"
                items:
                  type: "object"
                  properties:
                    username:
                      type: "string"
                    full_name:
                      type: "string"
                    question:
                      type: "string"
                    location:
                      type: "string"
  /queue/open.php:
    post:
      summary: "Open a queue (TA)"
      description: "Open the queue for the specified course to allow students to enter."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/freeze.php:
    post:
      summary: "Freeze a queue (TA)"
      description: "Freeze the queue for the specified course so no new students can enter. Open the queue to unfreeze."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/close.php:
    post:
      summary: "Close a queue (TA)"
      description: "Close the queue for the specified course. This removes all students from the queue and prevents new entries until the queue is opened."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/set_limit.php:
    post:
      summary: "Set a TA time limit per student (TA)"
      description: "Set with the specified positive integer the maximum amount of time a TA can spend with a student in the specified course. No time limit is assumed if it is not set. **The queue must be open.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "time_lim"
        in: "formData"
        description: "time limit (minutes)"
        type: "integer"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/enqueue_ta.php:
    post:
      summary: "Put TA on duty (TA)"
      description: "Put the TA on duty for the specified course.**The queue must be open.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/dequeue_ta.php:
    post:
      summary: "Take TA off duty (TA)"
      description: "Take the TA off duty for the specified course."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/enqueue_student.php:
    post:
      summary: "Enqueue user"
      description: "Enqueue the user for the specified course with the specified question and location.\n**Requirements:**\n- user must be enrolled in the course\n- course queue must be open\n- TAs cannot enter their own queues"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "question"
        in: "formData"
        description: "question/subject for TA"
        type: "string"
        required: true
      - name: "location"
        in: "formData"
        description: "location of student"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/dequeue_student.php:
    post:
      summary: "Dequeue a user"
      description: "Dequeue the user from the specified course. If the user is a TA, dequeue the specified user from the specified course. **TAs can only dequeue their own students.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "username"
        in: "formData"
        description: "user to dequeue"
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/inc_priority.php:
    post:
      summary: "Move a user up in the queue (TA)"
      description: "Move the specified user one spot up in the specified course. **Moving the user at the top of the queue up will result in an error.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "student"
        in: "formData"
        description: "user to move up"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/dec_priority.php:
    post:
      summary: "Move a user down in the queue (TA)"
      description: "Move the specified user one spot down in the specified course. **Moving the user at the bottom of the queue down will result in an error.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "student"
        in: "formData"
        description: "user to move down"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/help_student.php:
    post:
      summary: "Help a user (TA)"
      description: "Set the TA's status to helping the specified user in the specified course. A TA can only help one user at a time; a new user will override the current one. **The TA must be on duty in the specified course.**"
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      - name: "student"
        in: "formData"
        description: "username to help"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'
  /queue/release_ta.php:
    post:
      summary: "Free TA from helping (TA)"
      description: "Set the TA's status to free (i.e. not helping anyone) in the specified course."
      tags:
        - "Queue"
      parameters:
      - name: "course"
        in: "formData"
        description: "course name"
        type: "string"
        required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/success'

definitions:
  success:
    description: "Many endpoints return this simple JSON structure upon a successful request."
    properties:
      authenticated:
        description: "this will always be 'true' when logged in"
        type: "boolean"
      success:
        description: "the result of your request"
        type: "string"
  error:
    description: "Most endpoints return this JSON structure upon a failed request."
    properties:
      authenticated:
        description: "this will always be 'true' when logged in"
        type: "boolean"
      error:
        description: "what went wrong with your request"
        type: "string"
  no_login:
    description: "This JSON structure indicates you have not logged in."
    properties:
      authenticated:
        description: "this will always be 'false' when not logged in"
        type: "boolean"


# NOT SURE WHAT TO PUT FOR THESE

# Supported authentication methods are:
# -Basic authentication
# -API key (as a header or query parameter)
# -OAuth 2 common flows (implicit, password, application and access code)

# securityDefinitions:
#   BasicAuth:
#     type: basic

# THIS MIGHT GO IN EACH OPERATION
# security:
#   - BasicAuth: []











# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 3.0 SPEC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




#openapi: 3.0.0
#info:
#  title: Queue API for University of Utah College of Engineering
#  description: Below are endpoints/functionalities which can aid in designing a queue for the UofU COE.
#  version: 1.0.0
#
#servers:
#  - url: https://suzie.eng.utah.edu/blakeb/api
#    description: API endpoints are located here and in subdirectories.
#
#
## HERE'S A GOOD TUTORIAL FOR A SWAGGER SPEC:
##     https://swagger.io/docs/specification/basic-structure/
#
## I BELIEVE THE ONLY PARAMETERS TO SPECIFY FOR THESE ENDPOINTS ARE COOKIES
#
#
#paths:
#  /login.php:
#    post:
#      summary: Login
#      description: Login a user with the specified CADE credentials
#      requestBody:
#        required: true
#        content:
#          formData:
#            # CAN'T FIGURE THIS PART OUT
#
#      responses:
#        '200':    # status code
#          description: A JSON array of user data
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  type: string